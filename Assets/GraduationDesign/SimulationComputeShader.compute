#pragma use_dxc
#pragma enable_d3d11_debug_symbols

//--------------内核定义----------------//
#pragma kernel ForceCalculationKernel
#pragma kernel UpdateGranuleKernel
#pragma kernel UpdateParticleKernel
#pragma kernel UpdateRigidBodyData
#define DEBUG
#undef DEBUG

#define THREAD_GROUP_SIZE_X 64

//--------------基础数据结构定义----------------//
struct granule_data_type
{
    float3 position;
    float3 velocity;
    float3 angular_velocity;
    float4 quaternion;
    uint particle_index_begin;
    uint particle_index_end;
    uint initial_inertia_tensor_index;
    uint isControlledBySimulation;
    float particle_radius;
    float particle_mass;
};

struct plane_data_type
{
    float3 normal;
    float3 origin;
    float3 a_axis;
    float3 b_axis;
    float particle_radius;
};

struct CPU_TO_GPU_RigidBodyDataType
{
    uint IsControlledBySimulation;
    uint IndexInGranuleData;
    float3 Position;
    float4 Rotation;
};

//--------------Compute Buffer定义----------------//
RWStructuredBuffer<float3> particle_position_rw_structured_buffer;                                  //粒子位置
RWStructuredBuffer<float3> particle_velocity_rw_structured_buffer;                                  //粒子速度
RWStructuredBuffer<granule_data_type> granule_data_rw_structured_buffer;                            //Granule数据
ConsumeStructuredBuffer<granule_data_type> granule_data_consume_structured_buffer;                  //Granule数据，用于动态添加
StructuredBuffer<plane_data_type> plane_data_rw_structured_buffer;                                //平面数据
StructuredBuffer<float4x4> inertia_tensor_rw_structured_buffer;                                   //转动惯量
StructuredBuffer<uint> particle_index_to_granule_index_rw_structured_buffer;                      //粒子索引到Granule索引的映射
StructuredBuffer<float3> particle_initial_offset_rw_structured_buffer;                            //粒子初始位置偏移
RWStructuredBuffer<float3> particle_contact_force_rw_structured_buffer;                             //粒子接触力,这里是为了加速计算
RWStructuredBuffer<uint> particle_in_grid_index_rw_structured_buffer;                               //粒子所在网格索引
RWStructuredBuffer<uint> particle_in_grid_particle_index_rw_structured_buffer;                      //粒子所在网格内的粒子索引,用于充当排序的value
RWStructuredBuffer<CPU_TO_GPU_RigidBodyDataType> CPU_TO_GPU_RigidBodyDataBuffer;

#ifdef DEBUG
AppendStructuredBuffer<float3> debug_append_structured_buffer;                                      //for debug
#endif

//--------------变量定义----------------//
cbuffer STATIC_VAR:register(b0)
{
    float delta_time;                                                                                   //时间步长
    uint current_granule_count;                                                                          //当前Granule数量
    uint max_granule_count;                                                                              //最大Granule数量
    uint max_particle_count;                                                                             //最大粒子数量
    float particle_mass;                                                                                //粒子质量
    float particle_radius;                                                                              //粒子半径
    float k_d;                                                                                        //viscous damping coefficient(粘性阻尼系数)                                                    
    float k_r;                                                                                          //elastic restoration coefficient(弹性恢复系数)
    float mu;                                                                                           //friction coefficient(摩擦系数)
    float k_t;                                                                                          //tangential stiffness coefficient(切向刚度系数)
    uint plane_count;                                                                                   //平面数量
    float3 grid_size;                                                                                   //网格大小
    float3 grid_origin;                                                                                 //网格原点
    uint3 grid_resolution;                                                                                 //网格分辨率
    uint cpu_to_gpu_rigidbodydata_count;                                                                    //cpu到gpu的刚体数据数量
}

cbuffer DYNAMIC_VAR:register(b1)
{
    uint current_particle_count;                                                                         //当前粒子数量
    uint consume_granule_count;                                                                          //消耗Granule数量
    uint buffer_index_begin;                                                                             //缓冲区索引开始,这里主要用于处理双缓冲,值为0或1
    uint buffer_index_begin_multiple_max_granule_count;
}

//--------------函数定义----------------//
float3 get_now_particle_position(uint index);
float3 get_now_particle_velocity(uint index);
granule_data_type get_now_granule_data(uint index);
void set_now_particle_position(uint index, float3 position);
void set_now_particle_velocity(uint index, float3 velocity);
void set_now_granule_data(uint index, granule_data_type granule_data);
void set_next_state_particle_position(uint index, float3 position);
void set_next_state_particle_velocity(uint index, float3 velocity);
void set_next_state_granule_data(uint index, granule_data_type granule_data);
uint get_now_particle_index(uint particle_index);
uint get_now_granule_index(uint granule_index);
uint get_next_state_particle_index(uint particle_index);
uint get_next_state_granule_index(uint granule_index);
uint get_granule_index_of_particle(uint particle_index);
float3 get_particle_position_offset(uint particle_index);                                           //获取粒子位置偏移(相对于Granule)
float3x3 QuaternionToMatrix(float4 quaternion);                                                      //四元数转矩阵
void Simulation(uint3 granuleIndex : SV_DispatchThreadID,uint3 groupIndex : SV_GroupThreadID);       //模拟
void UpdateParticle(uint particleIndex,granule_data_type granule_data);
void UpdateGranule(uint granuleIndex, uint3 groupIndex);
float3 get_particle_force(uint particle_index);                                                           //particle所受力
float3 calculate_contact_force_between_two_particle(const uint particle_index1,const uint particle_index2,const float R1,const float R2); //计算两个粒子之间的接触力
float3 calculate_contact_force_between_two_particle(const float3 particle_position1,const float3 particle_position2,const float3 particle_velocity1,const float3 particle_velocity2,const float R1,const float R2); //计算两个粒子之间的接触力
float4 quaternionMul(float4 q1,float4 q2);
float3 calculate_contact_force_with_plane(const uint particle_index, const float R,const uint plane_index);
uint3 get_grid_index_uint3(float3 position);
uint get_grid_index_uint(float3 position);
uint2 find_element_in_particle_in_grid_index(uint grid_index);                                  //找到在buffer里面第一个粒子的索引和最后一个粒子的索引
uint get_grid_index_from_uint3(uint3 grid_index);
//--------------常量定义----------------//
//取消常量定义
static const float3 g = float3(0,-9.8,0);
static const int3 grid_offset[27]=
{
    int3(0,0,0),
    int3(0,0,1),
    int3(0,0,-1),
    int3(0,1,0),
    int3(0,1,1),
    int3(0,1,-1),
    int3(0,-1,0),
    int3(0,-1,1),
    int3(0,-1,-1),
    int3(1,0,0),
    int3(1,0,1),
    int3(1,0,-1),
    int3(1,1,0),
    int3(1,1,1),
    int3(1,1,-1),
    int3(1,-1,0),
    int3(1,-1,1),
    int3(1,-1,-1),
    int3(-1,0,0),
    int3(-1,0,1),
    int3(-1,0,-1),
    int3(-1,1,0),
    int3(-1,1,1),
    int3(-1,1,-1),
    int3(-1,-1,0),
    int3(-1,-1,1),
    int3(-1,-1,-1)
};


//--------------函数实现----------------//
float3 get_now_particle_position(uint index)
{
    return particle_position_rw_structured_buffer[get_now_particle_index(index)];
}

float3 get_now_particle_velocity(uint index)
{
    return particle_velocity_rw_structured_buffer[get_now_particle_index(index)];
}

granule_data_type get_now_granule_data(uint index)
{
    return granule_data_rw_structured_buffer[get_now_granule_index(index)];
}
void set_now_particle_position(uint index, float3 position)
{
    particle_position_rw_structured_buffer[get_now_particle_index(index)]=position;
}
void set_now_particle_velocity(uint index, float3 velocity)
{
    particle_velocity_rw_structured_buffer[get_now_particle_index(index)]=velocity;
}
void set_now_granule_data(uint index, granule_data_type granule_data)
{
    granule_data_rw_structured_buffer[get_now_granule_index(index)]=granule_data;
}
void set_next_state_particle_position(uint index, float3 position)
{
    particle_position_rw_structured_buffer[get_next_state_particle_index(index)]=position;  
}
void set_next_state_particle_velocity(uint index, float3 velocity)
{
    particle_velocity_rw_structured_buffer[get_next_state_particle_index(index)]=velocity;
}
void set_next_state_granule_data(uint index, granule_data_type granule_data)
{
    granule_data_rw_structured_buffer[get_next_state_granule_index(index)]=granule_data;
}
uint get_now_particle_index(uint particle_index)
{
    return particle_index+buffer_index_begin*max_particle_count;
}
uint get_now_granule_index(uint granule_index)
{
    return granule_index+buffer_index_begin_multiple_max_granule_count;
}
uint get_next_state_particle_index(uint particle_index)
{
    return particle_index+(1-buffer_index_begin)*max_particle_count;
}
uint get_next_state_granule_index(uint granule_index)
{
    return granule_index+(1-buffer_index_begin)*max_granule_count;
}
uint get_granule_index_of_particle(uint particle_index)
{
    return particle_index_to_granule_index_rw_structured_buffer[particle_index];
}
float3 get_particle_position_offset(uint particle_index)
{
    return particle_initial_offset_rw_structured_buffer[particle_index%max_particle_count];
}
float3x3 QuaternionToMatrix(float4 quaternion)
{
    float3x3 result;
    float s= quaternion.x;
    float3 v = quaternion.yzw;
    result[0][0] = 1-2*v.y*v.y-2*v.z*v.z;
    result[0][1] = 2*v.x*v.y-2*s*v.z;
    result[0][2] = 2*v.x*v.z+2*s*v.y;
    result[1][0] = 2*v.x*v.y+2*s*v.z;
    result[1][1] = 1-2*v.x*v.x-2*v.z*v.z;
    result[1][2] = 2*v.y*v.z-2*s*v.x;
    result[2][0] = 2*v.x*v.z-2*s*v.y;
    result[2][1] = 2*v.y*v.z+2*s*v.x;
    result[2][2] = 1-2*v.x*v.x-2*v.y*v.y;
    return result;
}
float4 quaternionMul(float4 q1,float4 q2)
{
    float4 result;
    float s1 = q1.x;
    float s2 = q2.x;
    float3 v1 = q1.yzw;
    float3 v2 = q2.yzw;

    result.x = s1*s2-dot(v1,v2);
    result.yzw = s1*v2+s2*v1+cross(v1,v2);
    
    return result;
}
uint3 get_grid_index_uint3(float3 position)
{
    return uint3((position-grid_origin)/grid_size);
}
uint get_grid_index(float3 position)
{
    uint3 grid_index=get_grid_index_uint3(position);
    return get_grid_index_from_uint3(grid_index);
}
uint get_grid_index_from_uint3(uint3 grid_index)
{
    return grid_index.x+grid_index.y*grid_resolution.x+grid_index.z*grid_resolution.x*grid_resolution.y;
}
uint2 find_element_in_particle_in_grid_index(uint grid_index)
{
    
    //先二分查找找到第一个等于grid_index的元素
    uint left=0,right=current_particle_count-1;
    while (left<right)
    {
        uint mid=(left+right)/2;
        if (particle_in_grid_index_rw_structured_buffer[mid]<grid_index)
        {
            left=mid+1;
        }
        else
        {
            right=mid;
        }
    }
    uint first=left;
    if (particle_in_grid_index_rw_structured_buffer[first]!=grid_index)
    {
        return uint2(current_particle_count,current_particle_count-1);
    }
    //再二分查找找到最后一个等于grid_index的元素
    left=0;
    right=current_particle_count-1;
    while (left<right)
    {
        uint mid=(left+right+1)/2;
        if (particle_in_grid_index_rw_structured_buffer[mid]<=grid_index)
        {
            left=mid;
        }
        else
        {
            right=mid-1;
        }
    }
    uint last=left;
    return uint2(first,last);
}
[numthreads(THREAD_GROUP_SIZE_X,1,1)]
void UpdateGranuleKernel (uint3 granuleIndex : SV_DispatchThreadID, uint3 groupIndex : SV_GroupThreadID)
{
    if (granuleIndex.x>=current_granule_count)
    {
        return;
    }
    ///granule_data_group_shared[groupIndex.x]=get_now_granule_data(granuleIndex.x);
    Simulation(granuleIndex,groupIndex);
    //set_next_state_granule_data(granuleIndex.x,granule_data_group_shared[groupIndex.x]);
}

void Simulation(uint3 granuleIndex : SV_DispatchThreadID,uint3 groupIndex : SV_GroupThreadID)
{
    UpdateGranule(granuleIndex.x,groupIndex);
}

void UpdateGranule(uint granuleIndex, uint3 groupIndex)
{
    const granule_data_type granule_data= get_now_granule_data(granuleIndex);
    if (granule_data.isControlledBySimulation==0)return;
    const uint first_particle_index=granule_data.particle_index_begin;
    const uint last_particle_index=granule_data.particle_index_end;
    
    
    float3 sum_force=float3(0,0,0);
    float3 sum_torque=float3(0,0,0);
    float3 particle_force=float3(0,0,0);
    for (uint i=first_particle_index;i<=last_particle_index;i++)
    {
        particle_force=particle_contact_force_rw_structured_buffer[i];

        sum_force+=particle_force;
        sum_torque+=cross(get_now_particle_position(i)-granule_data.position,particle_force);
    }



    const float3x3 rotation_matrix=QuaternionToMatrix(granule_data.quaternion);
    const float3x3 I_ref_inv={inertia_tensor_rw_structured_buffer[granule_data.initial_inertia_tensor_index][0][0],inertia_tensor_rw_structured_buffer[granule_data.initial_inertia_tensor_index][0][1],inertia_tensor_rw_structured_buffer[granule_data.initial_inertia_tensor_index][0][2],
                              inertia_tensor_rw_structured_buffer[granule_data.initial_inertia_tensor_index][1][0],inertia_tensor_rw_structured_buffer[granule_data.initial_inertia_tensor_index][1][1],inertia_tensor_rw_structured_buffer[granule_data.initial_inertia_tensor_index][1][2],
                              inertia_tensor_rw_structured_buffer[granule_data.initial_inertia_tensor_index][2][0],inertia_tensor_rw_structured_buffer[granule_data.initial_inertia_tensor_index][2][1],inertia_tensor_rw_structured_buffer[granule_data.initial_inertia_tensor_index][2][2]};

    const float3x3 I_inv=mul(rotation_matrix,mul(I_ref_inv,transpose(rotation_matrix)));
    const float3 angular_acceleration=mul(I_inv,sum_torque);
    const float3 angular_velocity=granule_data.angular_velocity+angular_acceleration*delta_time;
    const float3 acceleration=sum_force/granule_data.particle_mass/(last_particle_index-first_particle_index+1);
    const float3 velocity=granule_data.velocity+acceleration*delta_time;
    const float3 position=granule_data.position+velocity*delta_time;
    const float4 quaternion=normalize(granule_data.quaternion+quaternionMul(float4(0,angular_velocity),granule_data.quaternion)*delta_time*0.5);
    granule_data_type granule_data_new;
    granule_data_new.position=position;
    granule_data_new.velocity=velocity*0.95;
    granule_data_new.angular_velocity=angular_velocity*0.95;
    granule_data_new.quaternion=quaternion;
    granule_data_new.particle_index_begin=granule_data.particle_index_begin;
    granule_data_new.particle_index_end=granule_data.particle_index_end;
    granule_data_new.initial_inertia_tensor_index=granule_data.initial_inertia_tensor_index;
    granule_data_new.particle_radius=granule_data.particle_radius;
    granule_data_new.particle_mass=granule_data.particle_mass;
    granule_data_new.isControlledBySimulation=granule_data.isControlledBySimulation;
    set_next_state_granule_data(granuleIndex,granule_data_new);

    if (granule_data_new.isControlledBySimulation==1)
    {
        uint index_in_cpu_to_gpu_rigidbodydata=granuleIndex-(current_granule_count-cpu_to_gpu_rigidbodydata_count);
        CPU_TO_GPU_RigidBodyDataBuffer[index_in_cpu_to_gpu_rigidbodydata].Position=granule_data_new.position;
        CPU_TO_GPU_RigidBodyDataBuffer[index_in_cpu_to_gpu_rigidbodydata].Rotation=granule_data_new.quaternion;
        CPU_TO_GPU_RigidBodyDataBuffer[index_in_cpu_to_gpu_rigidbodydata].IsControlledBySimulation=1;
        CPU_TO_GPU_RigidBodyDataBuffer[index_in_cpu_to_gpu_rigidbodydata].IndexInGranuleData=granuleIndex;
    }
    
}

void UpdateParticle(uint particleIndex,granule_data_type granule_data)
{
    float3x3 rotation_matrix = QuaternionToMatrix(granule_data.quaternion);
    float3 particle_position=granule_data.position+mul(rotation_matrix,get_particle_position_offset(particleIndex));
    float3 particle_velocity=granule_data.velocity+cross(granule_data.angular_velocity,get_particle_position_offset(particleIndex));
    const uint grid_index=get_grid_index(particle_position);
    particle_in_grid_index_rw_structured_buffer[particleIndex]=grid_index;
    particle_in_grid_particle_index_rw_structured_buffer[particleIndex]=particleIndex;
    
    set_next_state_particle_position(particleIndex,particle_position);
    set_next_state_particle_velocity(particleIndex,particle_velocity);
}

float3 get_particle_force(uint particle_index)
{
    uint i;
    const granule_data_type granule_data=get_now_granule_data(get_granule_index_of_particle(particle_index));
    float3 res=granule_data.particle_mass*g;

    float3 res_without_grid=res;
    float3 res_with_grid=res;
    float3 force;

    #ifdef DEBUG
    float3 tmp;
    #endif
    
    for(i=0;i<current_particle_count;i++)
    {
        force=calculate_contact_force_between_two_particle(particle_index,i,granule_data.particle_radius,get_now_granule_data(get_granule_index_of_particle(i)).particle_radius);
        res_without_grid+=force;

        #ifdef DEBUG
        if (length(force)>0.1f)debug_append_structured_buffer.Append(float3(particle_index,i,111));
        #endif
        
        

    }
    uint3 grid_index=get_grid_index_uint3(get_now_particle_position(particle_index));
    [unroll(27)]
    for (i=0;i<27;i++)
    {
        uint3 neighbor_grid_index=grid_index+grid_offset[i];
        uint neighbor_grid_index_uint=get_grid_index_from_uint3(neighbor_grid_index);
        uint2 element_index=find_element_in_particle_in_grid_index(neighbor_grid_index_uint);

        for (uint j=element_index.x;j<=element_index.y;j++)
        {
            uint neighbor_particle_index=particle_in_grid_particle_index_rw_structured_buffer[j];

            force=calculate_contact_force_between_two_particle(particle_index,neighbor_particle_index,granule_data.particle_radius,get_now_granule_data(get_granule_index_of_particle(neighbor_particle_index)).particle_radius);
            res_with_grid+=force;

            #ifdef DEBUG
            debug_append_structured_buffer.Append(float3(particle_index,neighbor_particle_index,222));

            #endif
            
        }
    }

    
    
    for(i=0;i<plane_count;i++)
    {
        res_with_grid+=calculate_contact_force_with_plane(particle_index,granule_data.particle_radius,i);
    }
    return res_with_grid;
}

float3 calculate_contact_force_with_plane(const uint particle_index, const float R,const uint plane_index)
{
    float3 res=float3(0,0,0);
    const float3 particle_position=get_now_particle_position(particle_index);
    const float3 particle_velocity=get_now_particle_velocity(particle_index);
    const plane_data_type plane_data=plane_data_rw_structured_buffer[plane_index];

    const float3 particle_position_offset=particle_position-plane_data.origin;
    const float3 a_axis=normalize(plane_data.a_axis);
    const float3 b_axis=normalize(plane_data.b_axis);
    const float3 particle_position_in_plane_space={dot(particle_position_offset,a_axis),dot(particle_position_offset,plane_data.normal),dot(particle_position_offset,b_axis)};
    const float r=sqrt(R*R-particle_position_in_plane_space.y*particle_position_in_plane_space.y);
    //找到相交的Particle
    const float x_min=max(0,particle_position_in_plane_space.x-r);
    const float x_max=min(length(plane_data.a_axis),particle_position_in_plane_space.x+r);
    const float y_min=max(0,particle_position_in_plane_space.z-r);
    const float y_max=min(length(plane_data.b_axis),particle_position_in_plane_space.z+r);

    const uint x_min_index=floor(x_min/plane_data.particle_radius/2);
    const uint x_max_index=ceil(x_max/plane_data.particle_radius/2);
    const uint y_min_index=floor(y_min/plane_data.particle_radius/2);
    const uint y_max_index=ceil(y_max/plane_data.particle_radius/2);

    //根据距离平面的距离增加一个离开平面的力
    float dis=particle_position_in_plane_space.y;
    //当dis<0的时候，说明粒子在平面下面，那么就要施加一个力把它推到平面上
    if (dis<0)
    {
        res+=plane_data.normal*pow(-dis,0.5)*k_r;
    }

    for (uint x=x_min_index;x<=x_max_index;x++)
        for (uint y=y_min_index;y<=y_max_index;y++)
        {
            const float3 pos_in_world=plane_data.origin+a_axis*x*plane_data.particle_radius*2+b_axis*y*plane_data.particle_radius*2;
            float3 force=calculate_contact_force_between_two_particle(particle_position,pos_in_world,particle_velocity,float3(0,0,0),R,plane_data.particle_radius);
            res+=force;
        }
    
    return res;
}

float3 calculate_contact_force_between_two_particle(const uint particle_index1,const uint particle_index2,const float R1,const float R2)
{
    if (get_granule_index_of_particle(particle_index1)==get_granule_index_of_particle(particle_index2))return float3(0,0,0);
    const float3 particle_position1=get_now_particle_position(particle_index1);
    const float3 particle_position2=get_now_particle_position(particle_index2);
    const float3 particle_velocity1=get_now_particle_velocity(particle_index1);
    const float3 particle_velocity2=get_now_particle_velocity(particle_index2);
    return calculate_contact_force_between_two_particle(particle_position1,particle_position2,particle_velocity1,particle_velocity2,R1,R2);
}

float3 calculate_contact_force_between_two_particle(const float3 particle_position1,const float3 particle_position2,const float3 particle_velocity1,const float3 particle_velocity2,const float R1,const float R2)
{
    const float3 relative_position=particle_position1-particle_position2;
    const float distance_between_particles=length(relative_position);
    const float overlap_normal=max(R1+R2-distance_between_particles,0);
    const float3 normal_unit_vector=relative_position/distance_between_particles;
    const float3 r1=(R1-overlap_normal/2)*normal_unit_vector;
    const float3 contact_point=particle_position1+r1;
    const float3 contact_point_v1=particle_velocity1+cross(particle_velocity1,contact_point-particle_position1);
    const float3 contact_point_v2=particle_velocity2+cross(particle_velocity2,contact_point-particle_position2);
    const float3 v_relative=contact_point_v1-contact_point_v2;
    const float3 v_relative_normal=dot(v_relative,normal_unit_vector)*normal_unit_vector;
    const float3 v_relative_tangent=v_relative-v_relative_normal;
    const float3 v_relative_tangent_normal= length(v_relative_tangent)<0.0001?float3(0,0,0):normalize(v_relative_tangent);

    //计算法向力
    const float half_pow_of_overlap_normal=pow(overlap_normal,0.5);
    const float f_n=-(-k_d*half_pow_of_overlap_normal*length(v_relative_normal)-k_r*half_pow_of_overlap_normal*overlap_normal);
    const float3 f_n_vector=f_n*normal_unit_vector;

    //计算切向力
    const float f_t=-min(mu*f_n,k_t*length(v_relative_tangent));
    const float3 f_t_vector=f_t*v_relative_tangent_normal;
    
    return f_n_vector+f_t_vector;
}

[numthreads(THREAD_GROUP_SIZE_X,1,1)]
void ForceCalculationKernel(uint3 particleIndex : SV_DispatchThreadID,uint groupThreadID : SV_GroupThreadID)
{
    const uint index=particleIndex.x;
    if (index>=current_particle_count)
    {
        return;
    }
    const granule_data_type granule_data=get_now_granule_data(get_granule_index_of_particle(index));
    if (granule_data.isControlledBySimulation==false)return;
    const float3 force=get_particle_force(index);
    particle_contact_force_rw_structured_buffer[index]=force;

}

[numthreads(THREAD_GROUP_SIZE_X,1,1)]
void UpdateParticleKernel(uint3 particleIndex : SV_DispatchThreadID)
{
    const uint index=particleIndex.x;
    if (index>=current_particle_count)
    {
        return;
    }
    const granule_data_type granule_data=granule_data_rw_structured_buffer[get_next_state_granule_index(get_granule_index_of_particle(index))];
    UpdateParticle(index,granule_data);
}

[numthreads(THREAD_GROUP_SIZE_X,1,1)]
void UpdateRigidBodyData(uint3 granuleIndex : SV_DispatchThreadID)
{
    if (granuleIndex.x>=current_granule_count)return;
    if (granuleIndex.x<current_granule_count-cpu_to_gpu_rigidbodydata_count)return;
    const uint index=CPU_TO_GPU_RigidBodyDataBuffer[granuleIndex.x].IndexInGranuleData;
    if (index>=current_granule_count)
    {
        return;
    }
    granule_data_type granule_data=granule_data_rw_structured_buffer[get_next_state_granule_index(index)];
    if (granule_data.isControlledBySimulation==1)
    {
        //返回granule数据
        CPU_TO_GPU_RigidBodyDataBuffer[granuleIndex.x].Position=granule_data.position;
        CPU_TO_GPU_RigidBodyDataBuffer[granuleIndex.x].Rotation=granule_data.quaternion;
    }
    else
    {
        //更新granule数据
        granule_data_rw_structured_buffer[get_next_state_granule_index(index)]=granule_data;
        granule_data.position=CPU_TO_GPU_RigidBodyDataBuffer[granuleIndex.x].Position;
        granule_data.quaternion=CPU_TO_GPU_RigidBodyDataBuffer[granuleIndex.x].Rotation;
        granule_data.velocity=float3(0,0,0);
        granule_data.angular_velocity=float3(0,0,0);
        granule_data.isControlledBySimulation=0;
        set_next_state_granule_data(index,granule_data);
        
    }
}