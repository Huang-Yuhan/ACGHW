// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

StructuredBuffer<int> Triangles;
StructuredBuffer<float3> Vertices;
StructuredBuffer<float3> Samples;
AppendStructuredBuffer<float3> Result;

int SampleCount;
int TriangleCount;
float VoxelSize;
float3 Origin;
uint XCount;
uint YCount;
uint ZCount;
float lowerBound;

float isIntersecting(float3 pos,float3 dir,float3 point1,float3 point2,float3 point3)
{
    float3 S=pos-point1;
    float3 E1=point2-point1;
    float3 E2=point3-point1;
    float3 S1=cross(dir,E2);
    float3 S2=cross(S,E1);
    float S1E1=dot(S1,E1);
    float t=dot(S2,E2)/S1E1;
    float b1=dot(S1,S)/S1E1;
    float b2=dot(S2,dir)/S1E1;
    if (b1<0||b2<0||b1+b2>1)
    {
        return -1;
    }
    return t;
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x>XCount || id.y>YCount || id.z>ZCount)return;
    float3 pos=float3(id.x, id.y, id.z) * VoxelSize + Origin;
    float minDistance=1e10;
    float3 minDistancePos=float3(0,0,0);
    int hitCount=0;
    int hitBackCount=0;
    for(int i=0;i<TriangleCount;i++)
    {
        float3 point1=Vertices[Triangles[i*3]];
        float3 point2=Vertices[Triangles[i*3+1]];
        float3 point3=Vertices[Triangles[i*3+2]];

        for (int j=0;j<SampleCount;j++)
        {
            float3 dir=Samples[j];
            float t=isIntersecting(pos,dir,point1,point2,point3);
            if(t>0)
            {
                hitCount++;
                //计算三角形的法线
                float3 edge1=point2-point1;
                float3 edge2=point3-point1;
                float3 normal=cross(edge1,edge2);
                if (dot(normal,dir)>0)
                {
                    hitBackCount++;
                }
                if (t<minDistance)
                {
                    minDistance=t;
                    minDistancePos=pos+t*dir;
                }
            }
        }
    }
    if (hitCount>0&&hitBackCount>.25f*SampleCount)
    {
        minDistance*=-1;
    }
    if (abs(minDistance)<lowerBound)
    {
        Result.Append(minDistancePos);
    }
    
}