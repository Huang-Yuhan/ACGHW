// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct GranuleDataType
{
    float3 position;
    float3 velocity;
    float3 angularVelocity;
    float4 quaternion;
};

struct RigidBodyParticleData
{
    float3 position;
};

RWStructuredBuffer<float3> _ParticlePositionBuffer;
RWStructuredBuffer<float3> _ParticleVelocityBuffer;
RWStructuredBuffer<GranuleDataType> _GranuleBuffer;             //所有的buffer都实际扩大了一倍，分别用于存储当前时刻和下一时刻的数据
StructuredBuffer<RigidBodyParticleData> _RigidBodyParticleBuffer;//用于存储刚体的粒子数据
float _DeltaTime;
int _GranuleCount;
int _ParticleCount;
int _RigidBodyParticleCount;
float _ParticleMass;
float _ParticleRadius;
float _ViscousDampingCoefficient;
float _ElasticityRestoringCoefficient;
float _FrictionCoefficient;
float _VelocityDampingCoefficient;
float4x4 _GranuleInertiaReferenceTensor;

uint _bufferIndexBegin;                             //取值为0或1，表示当前时刻的数据存储在buffer的前半部分还是后半部分

float3 GetParticlePosition(uint particleIndex)
{
    return _ParticlePositionBuffer[particleIndex+_bufferIndexBegin*_ParticleCount];
}
float3 GetParticleVelocity(uint particleIndex)
{
    return _ParticleVelocityBuffer[particleIndex+_bufferIndexBegin*_ParticleCount];
}
GranuleDataType GetGranule(uint granuleIndex)
{
    return _GranuleBuffer[granuleIndex+_bufferIndexBegin*_GranuleCount];
}
void SetParticlePosition(uint particleIndex,float3 position)
{
    _ParticlePositionBuffer[particleIndex+(1-_bufferIndexBegin)*_ParticleCount] = position;
}
void SetParticleVelocity(uint particleIndex,float3 velocity)
{
    _ParticleVelocityBuffer[particleIndex+(1-_bufferIndexBegin)*_ParticleCount] = velocity;
}
void SetGranule(uint granuleIndex,GranuleDataType granule)
{
    _GranuleBuffer[granuleIndex+(1-_bufferIndexBegin)*_GranuleCount] = granule;
}

float4 quaternionMul(float4 q1,float4 q2)
{
    float4 result;
    float s1 = q1.x;
    float s2 = q2.x;
    float3 v1 = q1.yzw;
    float3 v2 = q2.yzw;

    result.x = s1*s2-dot(v1,v2);
    result.yzw = s1*v2+s2*v1+cross(v1,v2);
    
    return result;
}

static const float3 tetrahedron[4] = {                        
    float3(1,0,-1/sqrt(2)),
    float3(-1,0,-1/sqrt(2)),
    float3(0,1,1/sqrt(2)),
    float3(0,-1,1/sqrt(2))
};

static const float3 g = float3(0,-9.8,0);

void CSMain();
void TestSimulation(uint3 granuleIndex : SV_DispatchThreadID);
void UpdateParticle(uint particleIndex);
void UpdateGranule(uint granuleIndex);
float3x3 QuaternionToMatrix(float4 quaternion);
float3 ParticleForceSum(uint particleIndex);         //计算particle的接触力
float3 CalculateContactForce(uint particleIndex1,uint particleIndex2);    //计算两个particle之间的接触力，返回的是particle1受到的力
float3 CalculateContactForceWithRigidBodyParticle(uint particleIndex,uint rigidBodyParticleIndex);//计算particle和刚体粒子之间的接触力

inline uint GetGranuleIndex(uint particleIndex)
{
    return particleIndex/4;
}
inline uint GetFirstParticleIndex(uint granuleIndex)
{
    return granuleIndex*4;
}

float3 getParticleOffset(uint particleIndex)
{
    return tetrahedron[particleIndex%4]*_ParticleRadius;
}

[numthreads(64,1,1)]
void CSMain (uint3 granuleIndex : SV_DispatchThreadID)
{
    TestSimulation(granuleIndex);
}

void TestSimulation(uint3 granuleIndex : SV_DispatchThreadID)
{

    UpdateGranule(granuleIndex.x);
}

void UpdateGranule(uint granuleIndex)
{
    uint firstParticleIndex = GetFirstParticleIndex(granuleIndex);

    float3 sumForce = float3(0,0,0);
    float3 sumTorque = float3(0,0,0);

    float3 force1 = ParticleForceSum(firstParticleIndex);
    float3 force2 = ParticleForceSum(firstParticleIndex+1);
    float3 force3 = ParticleForceSum(firstParticleIndex+2);
    float3 force4 = ParticleForceSum(firstParticleIndex+3);

    sumForce+=force1+force2+force3+force4;

    float3 granuleAcceleration = sumForce/(_ParticleMass*4);
    
    GranuleDataType granule = GetGranule(granuleIndex);
    float3 granulePosition = granule.position;
    float3 granuleVelocity = granule.velocity;
    float3 granuleAngularVelocity = granule.angularVelocity;
    float4 granuleQuaternion = granule.quaternion;

    float3x3 rotationMatrix = QuaternionToMatrix(granuleQuaternion);
    float3 r1 = mul(rotationMatrix,getParticleOffset(firstParticleIndex));
    float3 r2 = mul(rotationMatrix,getParticleOffset(firstParticleIndex+1));
    float3 r3 = mul(rotationMatrix,getParticleOffset(firstParticleIndex+2));
    float3 r4 = mul(rotationMatrix,getParticleOffset(firstParticleIndex+3));

    float3 torque1 = cross(r1,force1);
    float3 torque2 = cross(r2,force2);
    float3 torque3 = cross(r3,force3);
    float3 torque4 = cross(r4,force4);

    sumTorque+=torque1+torque2+torque3+torque4;

    float3x3 InertiaReferenceTensor3x3 = _GranuleInertiaReferenceTensor;
    float3x3 InvInertiaReferenceTensor3x3 = float3x3(1/InertiaReferenceTensor3x3[0][0],0,0,0,1/InertiaReferenceTensor3x3[1][1],0,0,0,1/InertiaReferenceTensor3x3[2][2]);
    
    //float3x3 InertiaTensor = mul(rotationMatrix,mul(InertiaReferenceTensor3x3,transpose(rotationMatrix)));
    //float3x3 InvInertiaTensor = inverse(InertiaTensor);
    //该物体的惯性张量是一个对角矩阵，所以其逆矩阵也是一个对角矩阵，且对角元素的倒数就是原矩阵的对角元素的倒数
    //旋转矩阵同样是正交矩阵，所以其逆矩阵就是其转置矩阵
    float3x3 InertiaTensorInv = mul(rotationMatrix,mul(InvInertiaReferenceTensor3x3,transpose(rotationMatrix)));
    granuleVelocity = granuleVelocity + granuleAcceleration*_DeltaTime;
    granulePosition = granulePosition + granuleVelocity*_DeltaTime;
    
    
    granuleAngularVelocity = granule.angularVelocity + mul(InertiaTensorInv,sumTorque)*_DeltaTime;
    float3 temp = granuleAngularVelocity*_DeltaTime/2;
    granuleQuaternion =  granuleQuaternion + quaternionMul(float4(0,temp),granuleQuaternion);
    granule.angularVelocity = granuleAngularVelocity;
    granule.quaternion = normalize(granuleQuaternion);
    granule.position = granulePosition;
    granule.velocity = granuleVelocity;
    SetGranule(granuleIndex,granule);
    
    UpdateParticle(firstParticleIndex);
    UpdateParticle(firstParticleIndex+1);
    UpdateParticle(firstParticleIndex+2);
    UpdateParticle(firstParticleIndex+3);
}

void UpdateParticle(uint particleIndex)
{
    //根据granule的位置和速度，计算particle的位置和速度
    uint granuleIndex = GetGranuleIndex(particleIndex);
    GranuleDataType granule = _GranuleBuffer[granuleIndex+(1-_bufferIndexBegin)*_GranuleCount];                         //这里需要用到计算后的数据，所以不能用GetGranule函数
    float3 granulePosition = granule.position;
    float3 granuleVelocity = granule.velocity;
    float3 granuleAngularVelocity = granule.angularVelocity;
    float4 granuleQuaternion = granule.quaternion;
    float3x3 granuleRotationMatrix = QuaternionToMatrix(granuleQuaternion);
    float3 particlePosition = granulePosition + mul(granuleRotationMatrix,getParticleOffset(particleIndex));
    float3 particleVelocity = granuleVelocity + cross(granuleAngularVelocity,getParticleOffset(particleIndex));

    /*_ParticlePositionBuffer[particleIndex] = particlePosition;
    _ParticleVelocityBuffer[particleIndex] = particleVelocity;*/
    SetParticlePosition(particleIndex,particlePosition);
    SetParticleVelocity(particleIndex,particleVelocity);
}

float3x3 QuaternionToMatrix(float4 quaternion)
{
    float3x3 result;
    float x = quaternion.x;
    float y = quaternion.y;
    float z = quaternion.z;
    float w = quaternion.w;
    result[0][0] = 1 - 2*y*y - 2*z*z;
    result[0][1] = 2*x*y - 2*z*w;
    result[0][2] = 2*x*z + 2*y*w;
    result[1][0] = 2*x*y + 2*z*w;
    result[1][1] = 1 - 2*x*x - 2*z*z;
    result[1][2] = 2*y*z - 2*x*w;
    result[2][0] = 2*x*z - 2*y*w;
    result[2][1] = 2*y*z + 2*x*w;
    result[2][2] = 1 - 2*x*x - 2*y*y;
    return result;
}

float3 ParticleForceSum(uint particleIndex)
{
    float3 sumForce = float3(0,0,0);

    for(uint i=0;i<(uint)_GranuleCount;i++)
    {
        
        uint firstParticleIndex = GetFirstParticleIndex(i);
        if(GetGranuleIndex(particleIndex)==i)
        {
            continue;
        }
        float3 contactForce = float3(0,0,0);
        contactForce+=CalculateContactForce(particleIndex,firstParticleIndex);
        contactForce+=CalculateContactForce(particleIndex,firstParticleIndex+1);
        contactForce+=CalculateContactForce(particleIndex,firstParticleIndex+2);
        contactForce+=CalculateContactForce(particleIndex,firstParticleIndex+3);
        sumForce+=contactForce;
    }

    //计算和刚体粒子的接触力
    for(uint i=0;i<_RigidBodyParticleCount;i++)
    {
        float3 contactForce = CalculateContactForceWithRigidBodyParticle(particleIndex,i);
        sumForce+=contactForce;
    }
    
    sumForce+=_ParticleMass*g;
    return sumForce;
}

float3 CalculateContactForceWithRigidBodyParticle(uint particleIndex,uint rigidBodyParticleIndex)
{
    float3 position1 = GetParticlePosition(particleIndex);
    float3 position2 = _RigidBodyParticleBuffer[rigidBodyParticleIndex].position;
    float overlap_degree = _ParticleRadius*2-length(position2-position1);
    if(overlap_degree<=0)
    {
        return float3(0,0,0);
    }
    float3 contactNormal = normalize(position2-position1);
    float3 contactPointPosition = (position1+position2)/2;
    uint granuleIndex1 = GetGranuleIndex(particleIndex);
    GranuleDataType granule1 = GetGranule(granuleIndex1);

    float3 contactPointParticle1Velocity = granule1.velocity + cross(granule1.angularVelocity,contactPointPosition-granule1.position);
    float3 contactPointParticle2Velocity = float3(0,0,0);
    float3 relativeVelocity = contactPointParticle1Velocity - contactPointParticle2Velocity;

    float overlap_velocity = dot(relativeVelocity,contactNormal);
    float3 contactTangentVelocity = relativeVelocity - overlap_velocity*contactNormal;
    float f_normal = -_ViscousDampingCoefficient*sqrt(overlap_degree)*overlap_velocity-_ElasticityRestoringCoefficient*pow(overlap_degree,1.5);
    //return f_normal*contactNormal;
    float f_tangent = -min(_FrictionCoefficient*f_normal,_VelocityDampingCoefficient*length(contactTangentVelocity));
    return f_normal*contactNormal+f_tangent*normalize(contactTangentVelocity);
}

float3 CalculateContactForce(uint particleIndex1,uint particleIndex2)    //计算两个particle之间的接触力
{
    float3 position1 = GetParticlePosition(particleIndex1);
    float3 position2 = GetParticlePosition(particleIndex2);
    float overlap_degree = _ParticleRadius*2-length(position2-position1);
    if(overlap_degree<=0)
    {
        return float3(0,0,0);
    }
    float3 contactNormal = normalize(position2-position1);
    //float3 contactPointPosition = (_ParticlePositionBuffer[particleIndex1]+_ParticlePositionBuffer[particleIndex2])/2;      //由于半径相同，所以我们认为接触点在两个粒子的连线中点
    float3 contactPointPosition = (position1+position2)/2;
    uint granuleIndex1 = GetGranuleIndex(particleIndex1);
    GranuleDataType granule1 = GetGranule(granuleIndex1);
    uint granuleIndex2 = GetGranuleIndex(particleIndex2);
    GranuleDataType granule2 = GetGranule(granuleIndex2);

    float3 contactPointParticle1Velocity = granule1.velocity + cross(granule1.angularVelocity,contactPointPosition-granule1.position);
    float3 contactPointParticle2Velocity = granule2.velocity + cross(granule2.angularVelocity,contactPointPosition-granule2.position);
    float3 relativeVelocity = contactPointParticle1Velocity - contactPointParticle2Velocity;

    float overlap_velocity = dot(relativeVelocity,contactNormal);
    float3 contactTangentVelocity = relativeVelocity - overlap_velocity*contactNormal;
    float f_normal = -_ViscousDampingCoefficient*sqrt(overlap_degree)*overlap_velocity-_ElasticityRestoringCoefficient*pow(overlap_degree,1.5);
    return f_normal*contactNormal;
    float f_tangent = -min(_FrictionCoefficient*f_normal,_VelocityDampingCoefficient*length(contactTangentVelocity));
    return f_normal*contactNormal+f_tangent*normalize(contactTangentVelocity);
}



